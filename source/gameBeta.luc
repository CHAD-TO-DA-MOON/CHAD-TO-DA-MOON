module gameBeta (
    input clk,        // clock
    input rst,        // reset
    input buttons[3], // button input, 0-2 left to right
    input debugIn[16],// debug inputs to trigger game states
    output debugSeg[16],
    output debugLed[16]
  ) {
  
  gameAlu alu;
  sig aluB[16];
  sig data_in[16];
  
  .clk(clk) {
    edge_detector edTimer(#RISE(1), #FALL(0));
    
    .rst(rst) {
      gameCU cu;
      regfile regfile;
      counter slowTimer(#SIZE(1), #DIV(26));
    }
  }

  always {
    // Timer
    edTimer.in = slowTimer.value;
    cu.timerTick = edTimer.out;
    
    // CU - bootstrap branching reg to CU
    cu.buttons = buttons;    
    cu.reg48 = regfile.check_48; // placeholder for reg[0x48]
    cu.reg4B = regfile.check_bomb_4B; // placeholder for reg[0x48]
    cu.reg4C = regfile.check_danger_4C; // placeholder for reg[0x4C]
    cu.debugIn = debugIn;   
    
    // ALU
    case(cu.bsel) {
      0: aluB = 16b0; // placeholder for rdb
      1: aluB = cu.c;
      default:
        aluB = 16b0;
    }
    
    alu.x = 16b0; // placeholder for rda
    alu.y = aluB;
    alu.alufn = cu.alufn;
    
    // WDSEL
    case(cu.sr) {
      0: data_in = alu.out;
      1: data_in = 0; // placeholder for rom
      default: data_in = 0;
    }
    
    // REGFILE
    regfile.ra = cu.ra;
    regfile.rb = cu.rb;
    regfile.rc = cu.rc;
    regfile.we = cu.we;
    regfile.sr = cu.sr;
    regfile.data_in = data_in;
    regfile.game_reset = rst;
    
    // DEBUG
    debugSeg = cu.debugSeg;
    debugLed = cu.debugLed;
  }
}
