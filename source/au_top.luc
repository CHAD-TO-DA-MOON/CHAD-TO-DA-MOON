module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button[5],     // 5 buttons on IO Shield
    input io_dip [3][8],    // DIP switches on IO Shield
    output outled,          // pinC3 led_strip_writer
    input pb[3]             // pinC5 to left, pinC6 to center, pinC8 to right pushbutton
  ) {
  
  sig rst;                  // reset signal
  
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_conditioner button_cond[5];
    edge_detector buttondetector[5](#RISE(1), #FALL(0));
    
    .rst(rst) {
      // led_strip_output_test led_test;
      // regfile_leds_test rf_leds_test;
      multiSevenSegment multiSeg;
      gameBeta beta;
    }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    
    //button_cond.in = io_button; // reduce bouncing
    button_cond.in = pb;
    buttondetector.in = button_cond.out; // get edge of button press
    
    // connect manual input
    // beta.buttons[0] = buttondetector.out[3]; // left
    // beta.buttons[1] = buttondetector.out[2]; // center
    // beta.buttons[2] = buttondetector.out[4]; // right

    beta.buttons[0] = buttondetector.out[0]; // left
    beta.buttons[1] = buttondetector.out[1]; // center
    beta.buttons[2] = buttondetector.out[2]; // right
    
    beta.debugIn[7:0] = io_dip[0];
    beta.debugIn[15:8] = io_dip[1];
    
    // 7segment
    multiSeg.values = $build(beta.debugSeg, 4);
    io_seg = ~multiSeg.seg;
    io_sel = ~multiSeg.sel;
    
    io_led[0] = h7; // beta.debugLed[7:0];
    io_led[1] = h8; // beta.debugLed[15:8];
    io_led[2] = h9; // beta.debugLed[23:16];
    
    // led_strip_writer


    // regfile_leds_test
    // rf_leds_test.button = buttondetector.out;
    // outled = rf_leds_test.outlet;
    
    outled = beta.outled;
  }
}