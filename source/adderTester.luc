module adderTester (
    input clk, 
    input rst,
    input start,      // Press the "start" button to begin the unit tester. Start = 1 -> Tester wakes up; Start = 0 -> Tester is sleeping.
    input error,      // 1 -> tester in error mode; 0 -> tester in normal mode
    output indicator[2],
        // Success = 1 -> Pass the tester. Success = 0 -> Fail the tester.
    output state_indicator[4],
    output counter_indicator[8]
) {
  dff counter[4](#INIT(0), .clk(clk), .rst(rst));
  fsm state(.clk(clk), .rst(rst)) = {SLEEP, TEST, PASS, FAIL};
  adder adderUnit;

  always{
        indicator = 2b10;   // 00: pending; 01: pass all the tests; 10: fail the tester
        adderUnit.x = 16b0000000000000000;
        adderUnit.y = 16b0000000000000000;
        adderUnit.alufn = 6b000000;

        if (start == 0) {
          state.d = state.SLEEP;
          counter.d = 0;
        }
        
        case (state.q){
            state.SLEEP:
                if (start == 1) {state.d = state.TEST;}

            state.TEST:
                case (counter.q){
                    b0001: 
                        // ADD operation test: 0 + 0
                        // 0 + 0 = 0
                        adderUnit.alufn = 6b000000;  
                        adderUnit.x = 16b0;
                        adderUnit.y = 16b0;
                        if (error == 1) {if (~adderUnit.out != 16b0) {state.d = state.FAIL;}} 
                        else {if (adderUnit.out != 16b0) {state.d = state.FAIL;}} 
                        if (adderUnit.z != 1) {state.d = state.FAIL;}
                        if (adderUnit.v != 0) {state.d = state.FAIL;}
                        if (adderUnit.n != 0) {state.d = state.FAIL;}
                     

                    b0010: 
                        // ADD operation test: pos + pos with overflow
                        // 32767 + 1 = 32768
                        adderUnit.alufn = 6b000000;  
                        adderUnit.x = 16h7FFF;
                        adderUnit.y = 16h0001;
                        if (adderUnit.out != 16h8000) {state.d = state.FAIL;} 
                        if (adderUnit.z != 0) {state.d = state.FAIL;}
                        if (adderUnit.v != 1) {state.d = state.FAIL;}
                        if (adderUnit.n != 1) {state.d = state.FAIL;}
                    

                    b0011: 
                        // ADD operation test: pos + pos without overflow
                        // 2 + 3 = 5
                        adderUnit.alufn = 6b000000;  
                        adderUnit.x = 16h0002;
                        adderUnit.y = 16h0003;
                        if (adderUnit.out != 16h0005) {state.d = state.FAIL;} 
                        if (adderUnit.z != 0) {state.d = state.FAIL;}
                        if (adderUnit.v != 0) {state.d = state.FAIL;}
                        if (adderUnit.n != 0) {state.d = state.FAIL;}
                    
            
                    b0100: 
                        // ADD operation test: pos + neg without overflow 
                        // 2 + (-3) = -1
                        adderUnit.alufn = 6b000000;  
                        adderUnit.x = 16h0002;
                        adderUnit.y = 16hFFFD;
                        if (adderUnit.out != 16hFFFF) {state.d = state.FAIL;} 
                        if (adderUnit.z != 0) {state.d = state.FAIL;}
                        if (adderUnit.v != 0) {state.d = state.FAIL;}
                        if (adderUnit.n != 1) {state.d = state.FAIL;}
                    

                    b0101: 
                        // ADD operation test: pos + neg without overflow; cannot have overflow when operands have different signs
                        // 3 + (-2) = 1
                        adderUnit.alufn = 6b000000;  
                        adderUnit.x = 16h0003;
                        adderUnit.y = 16hFFFE;
                        if (adderUnit.out != 16h0001) {state.d = state.FAIL;} 
                        if (adderUnit.z != 0) {state.d = state.FAIL;}
                        if (adderUnit.v != 0) {state.d = state.FAIL;}
                        if (adderUnit.n != 0) {state.d = state.FAIL;}

                    b0110: 
                        // ADD operation test: neg + neg with overflow 
                        // -32767 + (-32767) = -65534
                        adderUnit.alufn = 6b000000;  
                        adderUnit.x = 16h8001;
                        adderUnit.y = 16h8001;
                        if (adderUnit.out != 16h0002) {state.d = state.FAIL;} 
                        if (adderUnit.z != 0) {state.d = state.FAIL;}
                        if (adderUnit.v != 1) {state.d = state.FAIL;}
                        if (adderUnit.n != 0) {state.d = state.FAIL;}
                     

                    b0111: 
                        // ADD operation test: neg + neg without overflow (-2) + (-3) = -5
                        adderUnit.alufn = 6b000000;  
                        adderUnit.x = 16hFFFE;
                        adderUnit.y = 16hFFFD;
                        if (adderUnit.out != 16hFFFB) {state.d = state.FAIL;} 
                        if (adderUnit.z != 0) {state.d = state.FAIL;}
                        if (adderUnit.v != 0) {state.d = state.FAIL;}
                        if (adderUnit.n != 1) {state.d = state.FAIL;}
                     

                    b1000: 
                        // SUB operation test: 0 - 0 
                        // 0 - 0 = 0
                        adderUnit.alufn = 6b000001;  
                        adderUnit.x = 16h0000;
                        adderUnit.y = 16h0000;
                        if (adderUnit.out != 16h0000) {state.d = state.FAIL;} 
                        if (adderUnit.z != 1) {state.d = state.FAIL;}
                        if (adderUnit.v != 0) {state.d = state.FAIL;}
                        if (adderUnit.n != 0) {state.d = state.FAIL;}
                     

                    b1001: 
                        // SUB operation test: pos - pos without overflow
                        // 3-1 = 2
                        adderUnit.alufn = 6b000001;  
                        adderUnit.x = 16h0003;
                        adderUnit.y = 16h0001;
                        if (adderUnit.out != 16h0002) {state.d = state.FAIL;} 
                        if (adderUnit.z != 0) {state.d = state.FAIL;}
                        if (adderUnit.v != 0) {state.d = state.FAIL;}
                        if (adderUnit.n != 0) {state.d = state.FAIL;}
                     

                    b1010: 
                        // SUB operation test: pos - neg with overflow
                        // 32767 - (-1) = 32768
                        adderUnit.alufn = 6b000001;  
                        adderUnit.x = 16h7FFF;
                        adderUnit.y = 16hFFFF;
                        if (adderUnit.out != 16h8000) {state.d = state.FAIL;} 
                        if (adderUnit.z != 0) {state.d = state.FAIL;}
                        if (adderUnit.v != 1) {state.d = state.FAIL;}
                        if (adderUnit.n != 1) {state.d = state.FAIL;}
                     

                    b1011: 
                        // SUB operation test: pos - neg without overflow
                        // 3 - (-1) = 4
                        adderUnit.alufn = 6b000001;  
                        adderUnit.x = 16h0003;
                        adderUnit.y = 16hFFFF;
                        if (adderUnit.out != 16h0004) {state.d = state.FAIL;} 
                        if (adderUnit.z != 0) {state.d = state.FAIL;}
                        if (adderUnit.v != 0) {state.d = state.FAIL;}
                        if (adderUnit.n != 0) {state.d = state.FAIL;}

                  b1100: 
                        // SUB operation test: neg - pos with overflow
                        // -4096 - 32767 = -36863
                        adderUnit.alufn = 6b000001;  
                        adderUnit.x = 16hF000;
                        adderUnit.y = 16h7FFF;
                        if (adderUnit.out != 16h7001) {state.d = state.FAIL;} 
                        if (adderUnit.z != 0) {state.d = state.FAIL;}
                        if (adderUnit.v != 1) {state.d = state.FAIL;}
                        if (adderUnit.n != 0) {state.d = state.FAIL;}
                     

                    b1101: 
                        // SUB operation test: neg - pos without overflow
                        // (-7) - 1 = -8
                        adderUnit.alufn = 6b000001;  
                        adderUnit.x = 16hFFF9;
                        adderUnit.y = 16h0001;
                        if (adderUnit.out != 16hFFF8) {state.d = state.FAIL;} 
                        if (adderUnit.z != 0) {state.d = state.FAIL;}
                        if (adderUnit.v != 0) {state.d = state.FAIL;}
                        if (adderUnit.n != 1) {state.d = state.FAIL;}
                     

                    b1110: 
                        // SUB operation test: neg - neg without overflow
                        // -2 - (-3) = 1
                        adderUnit.alufn = 6b000001;  
                        adderUnit.x = 16hFFFE;
                        adderUnit.y = 16hFFFD;
                        if (adderUnit.out != 16h0001) {state.d = state.FAIL;} 
                        if (adderUnit.z != 0) {state.d = state.FAIL;}
                        if (adderUnit.v != 0) {state.d = state.FAIL;}
                        if (adderUnit.n != 0) {state.d = state.FAIL;}
                     

                    b1111: 
                        state.d = state.PASS;
                }

            state.PASS:
                indicator = 2b11;

            state.FAIL:
                indicator = 2b01;
        
            
        }
        if(state.q == state.TEST) {
          counter.d = counter.q + 1;
        }
        counter_indicator = counter.q;
        case (state.q) {
      state.SLEEP: state_indicator=b0001;
      state.TEST:  state_indicator=b0010;
      state.PASS:  state_indicator=b0100;
      state.FAIL:  state_indicator=b1000;
      default: state_indicator=b1111;
        }
  }
}