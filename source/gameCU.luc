module gameCU (
    input clk,        // clock
    input rst,        // reset
    input buttons[3], // button input, 0-2 left to right
    input reg48[16],  // branching reg
    input timerTick,  // 1 when timer should update (edge detector)
    input debugIn[16],// debug inputs to trigger game states
    
    output alufn[6],  // define ALU op
    output bsel,      // 0 for OP, 1 for OPC
    output c[16],     // constant for OPC
    
    output ra[7],     // read address a
    output rb[7],     // read address b
    output rc[7],     // write address c
    output we,        // write enable
    output sr[3],     // update board gameState regs
    
    output ioState[4],// 0: -, 1: blank, 2: win, 3: lose, 4: low time
    
    output debug[16]  // 7seg debug output
  ) {
  
  // TODOS
  // Add little time left (Timer)
  // Reduce states from branching (due to boostrapped reg48)
  // Add shooting
  // bsel and c can be simplified into one control signal
  
  .clk(clk) {
    
    //Edge Detector
    edge_detector game_timer_detector(#RISE(1), #FALL(0));
    
    fsm gameState(#INIT(IDLE)) = {
      IDLE, // await start game, initialise board
      INIT_TIMER, // start timer
      PLAY, // await player action
      
      TIMER_CHECK, // check if game ended, decrease otherwise
      TIMER_BRANCH,
      TIMER_DECREASE,
      
      LEFT_CHECK, // check left bounds, move player
      LEFT_BRANCH,
      LEFT_REPOS,
      
      RIGHT_CHECK, // check right bounds, move player
      RIGHT_BRANCH,
      RIGHT_REPOS,
      
      SHOOT, // check ammo, shoot, remove bomb, decrement ammo
      
      RESET_BOMBS,
      COUNT_BOMBS, // calculate bombs
      CHECK_POSITION_BOMB_0,
      CHECK_POSITION_BOMB_1,
      CHECK_POSITION_BOMB_2,
      CHECK_POSITION_BOMB_3,
      CHECK_POSITION_BOMB_4,
      CHECK_POSITION_BOMB_5,
      CHECK_POSITION_BOMB_6,
      CHECK_POSITION_BOMB_7,
      INCREMENT_BOMB_0,
      INCREMENT_BOMB_1,
      INCREMENT_BOMB_2,
      INCREMENT_BOMB_3,
      INCREMENT_BOMB_4,
      INCREMENT_BOMB_5,
      INCREMENT_BOMB_6,
      INCREMENT_BOMB_7,
      
      // Lives
      UPDATE_LIVES,
      CHECK_PLAYER_LIVES,
      CHECK_ALIVE,
      ALIVE_BRANCH, //branch to check if player is alive
      
      // Board Update
      UPDATE_BOARD,
      UPDATE_BOARD_BRANCH,
      // READ_LEVELS,
      
      WIN, LOSE,
      RESET,
      LINES_CHECK, // Check if the lines are 0
      DECREMENT_ROW,
      UPDATE_ROWS, // TODO : Need rom selector
      
      //DEBUG With Slow Clock
      IDLE_DEBUG,
      LEFT_CHECK_DEBUG,
      SHOOT_DEBUG,
      RIGHT_CHECK_DEBUG,
      TIMER_CHECK_DEBUG,
      LOSE_DEBUG,
      TIMER_DECREASE_DEBUG,
      PLAY_DEBUG,
      LEFT_REPOS_DEBUG,
      RIGHT_REPOS_DEBUG
    };
    
    .rst(rst) {
      counter slow_timer(#SIZE(1),#DIV(26));  // Slow
      
      #INIT(0) {
      }
    }
    
  }
  
  always {
    // default control signals
    alufn = 6b0; bsel = 0; c = 16b0;
    ra = 7h0; rb = 7h0; rc = 7h0; we = 0; sr = 3b0;
    ioState = 4h0;
    debug = 16h0000;
    
    //edge detectors
    game_timer_detector.in = slow_timer.value; // Put counter through edge detector
    
    if(rst) {
      gameState.d = gameState.IDLE;
    }
    
    /// ********* GAME STATE MACHINE ********** ///
    case(gameState.q) {
      gameState.IDLE:
        if (buttons[0] || buttons[1] || buttons[2]) {
          // shift down by 1 row
          alufn = 6b0; bsel = 0; c = 16b1;
          ra = 7h0; rb = 7h0; rc = 7h0; we = 1; sr = b001;
          debug = 16h0001;
          gameState.d = gameState.IDLE_DEBUG;
        }
      
      gameState.IDLE_DEBUG :
        if ( game_timer_detector.out == 1){
          gameState.d = gameState.INIT_TIMER;
        }
      
      
      gameState.INIT_TIMER:
        alufn = 6b000000; bsel = 0; c = 16b0;
        ra = 7h0; rb = 7h0; rc = 7h4A; we = 1; sr = 3b0;
        debug = 16h0002;
        
        if (  game_timer_detector.out == 1){
          gameState.d = gameState.PLAY;
        }
      
      gameState.PLAY:
        debug = 16h0003;
        
        if (buttons[0]) {
          gameState.d = gameState.LEFT_CHECK_DEBUG;
        }
        else if (buttons[1]) {
          gameState.d = gameState.SHOOT_DEBUG;
        }
        else if (buttons[2]) {
          gameState.d = gameState.RIGHT_CHECK_DEBUG;
        }
        else if (timerTick) {
          gameState.d = gameState.TIMER_CHECK_DEBUG;
        }
      
      gameState.LEFT_CHECK_DEBUG:
        if (game_timer_detector.out == 1){
          gameState.d = gameState.LEFT_CHECK;
        }
      
      gameState.SHOOT_DEBUG:
        if (game_timer_detector.out == 1){
          gameState.d = gameState.SHOOT;
        }
      
      gameState.RIGHT_CHECK_DEBUG:
        if (game_timer_detector.out == 1){
          gameState.d = gameState.RIGHT_CHECK;
        }
      gameState.TIMER_CHECK_DEBUG:
        if (game_timer_detector.out == 1){
          gameState.d = gameState.TIMER_CHECK;
        }
      
      
      
      /// ********* TIMER ********** ///
      gameState.TIMER_CHECK:
        // CMPEQ: time == 0
        alufn = b100001; bsel = 0; c = 16b0;
        ra = 7h4A; rb = 7h50; rc = 7h48; we = 1; sr = 3b0;
        debug = 16h0010;
        
        if (game_timer_detector.out == 1){
          gameState.d = gameState.TIMER_BRANCH;
        }
      
      
      gameState.TIMER_BRANCH:
        // LOSE if time == 0, TIMER_DECREASE otherwise
        if (reg48 || (debugIn[0] && debugIn[1])) {
          gameState.d = gameState.LOSE_DEBUG;
        } else {
          gameState.d = gameState.TIMER_DECREASE_DEBUG;
        }
        debug = 16h0011;
      
      gameState.LOSE_DEBUG:
        if (game_timer_detector.out == 1){
          gameState.d = gameState.LOSE;
        }
      
      gameState.TIMER_DECREASE_DEBUG:
        if (game_timer_detector.out == 1){
          gameState.d = gameState.TIMER_DECREASE;
        }
      
      gameState.TIMER_DECREASE:
        // SUB: decrease timer by 1
        alufn = b000001; bsel = 0; c = 16b0;
        ra = 7h4A; rb = 7h51; rc = 7h4A; we = 1; sr = 3b0;
        debug = 16h0012;
        
        gameState.d = gameState.PLAY;
      
      
      /// ********* MOVE PLAYER ********** ///
      gameState.LEFT_CHECK:
        // CMPLT: player pos < 0
        alufn = b100011; bsel = 0; c = 16b0;
        ra = 7h56; rb = 7h50; rc = 7h48; we = 1; sr = 3b0;
        debug = 16h0020;
        
        if (game_timer_detector.out == 1){
          gameState.d = gameState.LEFT_BRANCH;
        }
      
      
      gameState.LEFT_BRANCH:
        // PLAY if pos < 0, LEFT_REPOS otherwise
        debug = 16h0021;
        
        if (reg48 || (debugIn[0] && debugIn[4])) {
          gameState.d = gameState.PLAY_DEBUG;
        } else {
          gameState.d = gameState.LEFT_REPOS_DEBUG;
        }
      
      gameState.PLAY_DEBUG:
        if (game_timer_detector.out == 1){
          gameState.d = gameState.PLAY;
        }
      
      gameState.LEFT_REPOS_DEBUG:
        if (game_timer_detector.out == 1){
          gameState.d = gameState.LEFT_REPOS;
        }
      
      
      gameState.LEFT_REPOS:
        // SUB: move player left
        alufn = b000001; bsel = 0; c = 16b0;
        ra = 7h56; rb = 7h51; rc = 7h56; we = 1; sr = 3b0;
        debug = 16h0022;
        
        if (game_timer_detector.out == 1){
          gameState.d = gameState.RESET_BOMBS;
        }
      
      
      gameState.RIGHT_CHECK:
        // CMPLEC: player pos < 7
        alufn = b100011; bsel = 1; c = 16h0007;
        ra = 7h56; rb = 7h00; rc = 7h48; we = 1; sr = 3b0;
        debug = 16h0023;
        
        if (game_timer_detector.out == 1){
          gameState.d = gameState.RIGHT_BRANCH;
        }
      
      
      gameState.RIGHT_BRANCH:
        // RIGHT_REPOS if pos < 7, PLAY otherwise
        debug = 16h0024;
        
        if (reg48 || (debugIn[0] && debugIn[5])) {
          gameState.d = gameState.RIGHT_REPOS_DEBUG;
        } else {
          gameState.d = gameState.PLAY_DEBUG;
        }
      
      gameState.RIGHT_REPOS_DEBUG:
        if (game_timer_detector.out == 1){
          gameState.d = gameState.RIGHT_REPOS;
        }
      
      
      gameState.RIGHT_REPOS:
        // ADD: move player right
        alufn = b000000; bsel = 0; c = 16b0;
        ra = 7h56; rb = 7h51; rc = 7h56; we = 1; sr = 3b0;
        debug = 16h0025;
        
        if (game_timer_detector.out == 1){
          gameState.d = gameState.RESET_BOMBS;
        }
      
      gameState.SHOOT: //TODO : Not done yet. Might need to decrease ammo counter
        debug = 16h0026;
        
        if (game_timer_detector.out == 1){
          gameState.d = gameState.RESET_BOMBS;
        }
      
      
      /// ***** COUNT BOMBS ***** ///
      gameState.RESET_BOMBS:
        // 'A' boolean operation
        alufn = b010011; bsel = 1; c = 0;
        ra = 7h50; rb = 7h00; rc = 7h48; we = 1; sr = 0;
        debug = 16h0030;
        
        if (game_timer_detector.out == 1){
          gameState.d = gameState.COUNT_BOMBS;
        }
      
      
      gameState.COUNT_BOMBS:
        //CMPEQ
        alufn = b100001; bsel = 1; c = 1;
        ra = 7h00; rb = 7h00; rc = 7h48; we = 0; sr = 0;
        debug = 16h0031;
        
        if (game_timer_detector.out == 1){
          gameState.d = gameState.CHECK_POSITION_BOMB_0;
        }
        
        
        /// ********* 0 ********** ///
        //CMPEQ
        alufn = b100001; bsel = 1; c = 1;
        ra = 7h01; rb = 7h00; rc = 7h48; we = 0; sr = 0;
        debug = 16h0032;
      gameState.CHECK_POSITION_BOMB_0:
        if (game_timer_detector.out == 1){
          if (reg48) {
            gameState.d = gameState.INCREMENT_BOMB_0;
          } else {
            gameState.d = gameState.CHECK_POSITION_BOMB_1;
          } }
      
      
      gameState.INCREMENT_BOMB_0:
        //ADD
        alufn = b000000; bsel = 1; c = 1;
        ra = 7h49; rb = 0; rc = 7h49; we = 1; sr = 0;
        debug = 16h0033;
        if (game_timer_detector.out == 1){
          gameState.d = gameState.CHECK_POSITION_BOMB_1;
        }
      
      /// ********* 1 ********** ///
      gameState.CHECK_POSITION_BOMB_1:
        
        //CMPEQ
        alufn = b100001; bsel = 1; c = 1;
        ra = 7h02; rb = 7h00; rc = 7h48; we = 0; sr = 0;
        debug = 16h0034;
        
        if (game_timer_detector.out == 1){
          if (reg48) {
            gameState.d = gameState.INCREMENT_BOMB_1;
          } else {
            gameState.d = gameState.CHECK_POSITION_BOMB_2;
          }
        }
      
      gameState.INCREMENT_BOMB_1:
        //ADD
        alufn = b000000; bsel = 1; c = 1;
        ra = 7h49; rb = 0; rc = 7h49; we = 1; sr = 0;
        debug = 16h0035;
        
        if (game_timer_detector.out == 1){
          gameState.d = gameState.CHECK_POSITION_BOMB_2;
        }
      
      
      /// ********* 2 ********** ///
      gameState.CHECK_POSITION_BOMB_2:
        
        //CMPEQ
        alufn = b100001; bsel = 1; c = 1;
        ra = 7h03; rb = 7h00; rc = 7h48; we = 0; sr = 0;
        debug = 16h0036;
        
        if (game_timer_detector.out == 1){
          if (reg48) {
            gameState.d = gameState.INCREMENT_BOMB_2;
          } else {
            gameState.d = gameState.CHECK_POSITION_BOMB_3;
          }
        }
      
      
      gameState.INCREMENT_BOMB_2:
        //ADD
        alufn = b000000; bsel = 1; c = 1;
        ra = 7h49; rb = 0; rc = 7h49; we = 1; sr = 0;
        debug = 16h0037;
        
        if (game_timer_detector.out == 1){
          gameState.d = gameState.CHECK_POSITION_BOMB_3;
        }
      
      
      /// ********* 3 ********** ///
      gameState.CHECK_POSITION_BOMB_3:
        
        //CMPEQ
        alufn = b100001; bsel = 1; c = 1;
        ra = 7h04; rb = 7h00; rc = 7h48; we = 0; sr = 0;
        debug = 16h0038;
        
        if (game_timer_detector.out == 1){
          if (reg48) {
            gameState.d = gameState.INCREMENT_BOMB_3;
          } else {
            gameState.d = gameState.CHECK_POSITION_BOMB_4;
          }   }
      
      gameState.INCREMENT_BOMB_3:
        //ADD
        alufn = b000000; bsel = 1; c = 1;
        ra = 7h49; rb = 0; rc = 7h49; we = 1; sr = 0;
        debug = 16h0039;
        
        if (game_timer_detector.out == 1){
          gameState.d = gameState.CHECK_POSITION_BOMB_4;
        }
      
      
      /// ********* 4 ********** ///
      gameState.CHECK_POSITION_BOMB_4:
        
        //CMPEQ
        alufn = b100001; bsel = 1; c = 1;
        ra = 7h05; rb = 7h00; rc = 7h48; we = 0; sr = 0;
        debug = 16h0040;

        if (game_timer_detector.out == 1){
if (reg48) {
          gameState.d = gameState.INCREMENT_BOMB_4;
        } else {
          gameState.d = gameState.CHECK_POSITION_BOMB_5;
        }        }
      
      
      gameState.INCREMENT_BOMB_4:
        //ADD
        alufn = b000000; bsel = 1; c = 1;
        ra = 7h49; rb = 0; rc = 7h49; we = 1; sr = 0;
        debug = 16h0041;
        
        
        if (game_timer_detector.out == 1){
          gameState.d = gameState.CHECK_POSITION_BOMB_5;
        }
        
        
        
        /// ********* 5 ********** ///
      
      gameState.CHECK_POSITION_BOMB_5:
        //CMPEQ
        alufn = b100001; bsel = 1; c = 1;
        ra = 7h06; rb = 7h00; rc = 7h48; we = 0; sr = 0;
        debug = 16h0042;
        if (game_timer_detector.out == 1){
          if (reg48) {
            gameState.d = gameState.INCREMENT_BOMB_5;
          } else {
            gameState.d = gameState.CHECK_POSITION_BOMB_6;
          }
        }
      
      gameState.INCREMENT_BOMB_5:
        //ADD
        alufn = b000000; bsel = 1; c = 1;
        ra = 7h49; rb = 0; rc = 7h49; we = 1; sr = 0;
        gameState.d = gameState.CHECK_POSITION_BOMB_6;
        debug = 16h0043;
      
      
      
      
      /// ********* 6 ********** ///
      gameState.CHECK_POSITION_BOMB_6:
        if (reg48) {
          gameState.d = gameState.INCREMENT_BOMB_6;
        } else {
          gameState.d = gameState.CHECK_POSITION_BOMB_7;
        }
        //CMPEQ
        alufn = b100001; bsel = 1; c = 1;
        ra = 7h07; rb = 7h00; rc = 7h48; we = 0; sr = 0;
        debug = 16h0044;
      
      
      gameState.INCREMENT_BOMB_6:
        //ADD
        alufn = b000000; bsel = 1; c = 1;
        ra = 7h49; rb = 0; rc = 7h49; we = 1; sr = 0;
        gameState.d = gameState.CHECK_POSITION_BOMB_7;
        debug = 16h0045;
      
      /// ********* 7 ********** ///
      gameState.CHECK_POSITION_BOMB_7:
        if (reg48) {
          gameState.d = gameState.INCREMENT_BOMB_7;
        } else {
          gameState.d = gameState.UPDATE_LIVES;
        }
        debug = 16h0046;
      
      gameState.INCREMENT_BOMB_7:
        //ADD
        alufn = b000000; bsel = 1; c = 1;
        ra = 7h49; rb = 0; rc = 7h49; we = 1; sr = 0;
        gameState.d = gameState.UPDATE_LIVES;
        debug = 16h0047;
      
      
      /// ***** UPDATE LIVES ***** ///
      gameState.UPDATE_LIVES:
        // SUB : Decrement player life by bomb counter
        alufn = b000001; bsel = 0; c = 0;  // SUB
        ra = 7h54; rb = 7h49; rc = 7h54; we = 1; sr = 0;
        gameState.d = gameState.CHECK_PLAYER_LIVES;
        debug = 16h0050;
      
      gameState.CHECK_PLAYER_LIVES:
        // CMPLT
        alufn = b100011; bsel = 0; c = 0;
        ra = 7h54; rb = 7h50; rc = 7h48; we = 1; sr = 0;
        debug = 16h0051;
        
        gameState.d = gameState.ALIVE_BRANCH;
      
      gameState.ALIVE_BRANCH:
        // LOSE if player_life < 0, UPDATE_BOARD otherwise
        if (reg48 || (debugIn[0] && debugIn[2])) {
          gameState.d = gameState.LOSE;
        } else {
          gameState.d = gameState.UPDATE_BOARD;
        }
        debug = 16h0052;
      
      
      /// ********* BOARD UPDATE ********** ///
      
      // Check whether game ends before updating the board
      gameState.UPDATE_BOARD:
        // CMPEQ: lines_left == 0
        alufn = b100001; bsel = 0; c = 16b0;
        ra = 7h53; rb = 7h50; rc = 7h48; we = 1; sr = 0;
        debug = 16h0060;
        
        gameState.d = gameState.UPDATE_BOARD_BRANCH;
      
      // Check if game is over or the rows is needed to be moved down
      gameState.UPDATE_BOARD_BRANCH:
        // lines_left == 0 win; update rows otherwise
        if (reg48 || (debugIn[0] && debugIn[3])) {
          gameState.d = gameState.WIN;
        } else {
          gameState.d = gameState.UPDATE_ROWS;
        }
        debug = 16h0061;
      
      // Move rows down by 1
      gameState.UPDATE_ROWS:
        alufn = 6b0; bsel = 0; c = 1;
        ra = 7h0; rb = 7h0; rc = 7h0; we = 1; sr = 1;
        debug = 16h0062;
        
        gameState.d = gameState.DECREMENT_ROW;
      
      // Read levels from ROM, may not be needed if implemented in regfile (sr=1)
      // TODO: Not too sure about this. need to check with @ruien
      // gameState.READ_LEVELS:
      // LD Reg[0x00 : 0x07] �?
      // Mem[Reg[0x56] : Reg[0x56] + 2 x 8]
      // alufn = b000000; bsel = 1; c = 1;
      // ra = addr of rom_sel
      // c = 1; we = 1; sr = 0;
      // gameState.d = gameState.DECREMENT_ROW;
      
      // State to move the rows down
      gameState.DECREMENT_ROW:
        // SUB : lines_left = lines_left - 1
        alufn = b000001; bsel = 0; c = 16b0;
        ra = 7h53; rb = 7h51; rc = 7h53; we = 1; sr = 3b0;
        debug = 16b0;
        gameState.d = gameState.PLAY; // Game state to wait for input from player
        debug = 16h0063;
      
      /// ********* END GAME ********** ///
      gameState.WIN:
        ioState = 4h2;
        if (buttons[0] || buttons[1] || buttons[2]) {
          gameState.d = gameState.IDLE;
        }
        debug = 16h0070;
      
      
      gameState.LOSE:
        ioState = 4h3;
        if (buttons[0] || buttons[1] || buttons[2]) {
          gameState.d = gameState.IDLE;
        }
        debug = 16h0071;
      
    }
    
  }
}