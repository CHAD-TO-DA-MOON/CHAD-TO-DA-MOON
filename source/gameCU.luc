module gameCU (
    input clk,        // clock
    input rst,        // reset
    input buttons[3], // button input, 0-2 left to right
    input reg48[16],  // branching reg
    input timerTick,  // 1 when timer should update (edge detector)
    
    output alufn[6],  // define ALU op
    output bsel,      // 0 for OP, 1 for OPC
    output c[16],     // constant for OPC
    
    output ra[7],     // read address a
    output rb[7],     // read address b
    output rc[7],     // write address c
    output we,        // write enable
    output sr[3],     // update board gameState regs
    
    output debug[16]  // 7seg debug output
  ) {
  
  // TODOS
  // Add little time left (Timer)
  // Reduce states from branching (due to boostrapped reg48)
  // Add shooting
  // bsel and c can be simplified into one control signal
  
  .clk(clk) {
  
    fsm gameState(#INIT(IDLE)) = {
      IDLE, // await start game, initialise board
      PLAY, // await player action
      
      TIMER_CHECK, // check if game ended, decrease otherwise
      TIMER_BRANCH,
      TIMER_DECREASE,
      
      LEFT_CHECK, // check left bounds, move player
      LEFT_BRANCH,
      LEFT_REPOS,
      
      RIGHT_CHECK, // check right bounds, move player
      RIGHT_BRANCH,
      RIGHT_REPOS,
      
      SHOOT, // check ammo, shoot, remove bomb, decrement ammo
      
      COUNT_BOMBS, // calculate bombs
      CHECK_POSITION_BOMB_0,
      CHECK_POSITION_BOMB_1,
      CHECK_POSITION_BOMB_2,
      CHECK_POSITION_BOMB_3,
      CHECK_POSITION_BOMB_4,
      CHECK_POSITION_BOMB_5,
      CHECK_POSITION_BOMB_6,
      CHECK_POSITION_BOMB_7,
      INCREMENT_BOMB_0,
      INCREMENT_BOMB_1,
      INCREMENT_BOMB_2,
      INCREMENT_BOMB_3,
      INCREMENT_BOMB_4,
      INCREMENT_BOMB_5,
      INCREMENT_BOMB_6,
      INCREMENT_BOMB_7,      
      UPDATE_LIVES,
      UPDATE_BOARD,
      WIN, LOSE,
      RESET
    };
    
    .rst(rst) {
      #INIT(0) {
      }
    }
    
  }

  always {
    // default control signals
    alufn = 6b0; bsel = 0; c = 16b0; 
    ra = 7h0; rb = 7h0; rc = 7h0; we = 0; sr = 3b0;
    debug = 16b0;
    
    if(rst) {
      gameState.d = gameState.IDLE;
    }
  
    case(gameState.q) {
      gameState.IDLE:
        if (buttons[0] || buttons[1] || buttons[2]) {
          // reset board regs
          alufn = 6b0; bsel = 0; c = 16b1; 
          ra = 7h0; rb = 7h0; rc = 7h0; we = 1; sr = b001;
          debug = 16b0;
          
          gameState.d = gameState.PLAY;
        }
      
      gameState.PLAY:
        if (buttons[0]) {
          gameState.d = gameState.LEFT_CHECK;
        }
        else if (buttons[1]) {
          gameState.d = gameState.SHOOT;
        }
        else if (buttons[2]) {
          gameState.d = gameState.RIGHT_CHECK;
        } 
        else if (timerTick) {
          gameState.d = gameState.TIMER_CHECK;
        }
      
      gameState.TIMER_CHECK:
        // CMPEQ: time == 0
        alufn = b110011; bsel = 0; c = 16b0;
        ra = 7h4A; rb = 7h50; rc = 7h48; we = 1; sr = 3b0;
        debug = 16b0;
        
        gameState.d = gameState.TIMER_BRANCH;
      
      gameState.TIMER_BRANCH:
        // LOSE if time == 0, TIMER_DECREASE otherwise
        if (reg48) {
          gameState.d = gameState.LOSE;
        } else {
          gameState.d = gameState.TIMER_DECREASE;
        }
      
      gameState.TIMER_DECREASE:
        // SUB: decrease timer by 1
        alufn = b000001; bsel = 0; c = 16b0;
        ra = 7h4A; rb = 7h51; rc = 7h4A; we = 1; sr = 3b0;
        debug = 16b0;
        
        gameState.d = gameState.PLAY;
      
      gameState.LEFT_CHECK:
        // CMPLT: player pos < 0
        alufn = b110101; bsel = 0; c = 16b0;
        ra = 7h56; rb = 7h50; rc = 7h48; we = 1; sr = 3b0;
        debug = 16b0;
        
        gameState.d = gameState.LEFT_BRANCH;
      
      gameState.LEFT_BRANCH:
        // PLAY if pos < 0, LEFT_REPOS otherwise
        if (reg48) {
          gameState.d = gameState.PLAY;
        } else {
          gameState.d = gameState.LEFT_REPOS;
        }
      
      gameState.LEFT_REPOS:
        // SUB: move player left
        alufn = b000001; bsel = 0; c = 16b0; 
        ra = 7h56; rb = 7h51; rc = 7h56; we = 1; sr = 3b0;
        debug = 16b0;
        
        gameState.d = gameState.COUNT_BOMBS;
      
      gameState.RIGHT_CHECK:
        // CMPLEC: player pos < 7
        alufn = b110111; bsel = 1; c = 16h0007;
        ra = 7h56; rb = 7h00; rc = 7h48; we = 1; sr = 3b0;
        debug = 16b0;
        
        gameState.d = gameState.RIGHT_BRANCH;
      
      gameState.RIGHT_BRANCH:
        // PLAY if pos < 0, LEFT_REPOS otherwise
        if (reg48) {
          gameState.d = gameState.RIGHT_REPOS;
        } else {
          gameState.d = gameState.PLAY;
        }
      
      gameState.RIGHT_REPOS:
        // ADD: move player right
        alufn = b000000; bsel = 0; c = 16b0; 
        ra = 7h56; rb = 7h51; rc = 7h56; we = 1; sr = 3b0;
        debug = 16b0;
        
        gameState.d = gameState.COUNT_BOMBS;
      
      gameState.SHOOT:
        gameState.d = gameState.COUNT_BOMBS;
      
        
        /// ***** COUNT BOMBS ***** ///
        
        
      gameState.COUNT_BOMBS:
        alufn = b110011; bsel = 1; c = 1;
        ra = 8h00; rb = 8h00; rc = 8h48; we = 0; sr = 0;
        gameState.d = gameState.CHECK_POSITION_BOMB_0;        
       
     
        /// ********* 0 ********** ///
          
      gameState.CHECK_POSITION_BOMB_0:               
        if (reg48) {
          gameState.d = gameState.INCREMENT_BOMB_0;
        } else {
          gameState.d = gameState.CHECK_POSITION_BOMB_1;
        }
        alufn = b110011; bsel = 1; c = 1;
        ra = 8h00; rb = 8h00; rc = 8h48; we = 0; sr = 0;
        
          
      gameState.INCREMENT_BOMB_0:
        alufn = b000000; bsel = 1; c = 1;
        ra = 8h49; rb = 0; rc = 8h49; we = 1; sr = 0;
        gameState.d = gameState.CHECK_POSITION_BOMB_1;
      
        
        
        /// ********* 1 ********** ///
          
      gameState.CHECK_POSITION_BOMB_1:               
        if (reg48) {
          gameState.d = gameState.INCREMENT_BOMB_1;
        } else {
          gameState.d = gameState.CHECK_POSITION_BOMB_2;
        }
        alufn = b110011; bsel = 1; c = 1;
        ra = 8h00; rb = 8h00; rc = 8h48; we = 0; sr = 0;
        
          
      gameState.INCREMENT_BOMB_1:
        alufn = b000000; bsel = 1; c = 1;
        ra = 8h49; rb = 0; rc = 8h49; we = 1; sr = 0;
        gameState.d = gameState.CHECK_POSITION_BOMB_2;
        
        
        
       /// ********* 2 ********** ///
          
      gameState.CHECK_POSITION_BOMB_2:               
        if (reg48) {
          gameState.d = gameState.INCREMENT_BOMB_2;
        } else {
          gameState.d = gameState.CHECK_POSITION_BOMB_3;
        }
        alufn = b110011; bsel = 1; c = 1;
        ra = 8h00; rb = 8h00; rc = 8h48; we = 0; sr = 0;
        
          
      gameState.INCREMENT_BOMB_2:
        alufn = b000000; bsel = 1; c = 1;
        ra = 8h49; rb = 0; rc = 8h49; we = 1; sr = 0;
        gameState.d = gameState.CHECK_POSITION_BOMB_3;
        
        
        
      /// ********* 3 ********** ///
          
      gameState.CHECK_POSITION_BOMB_3:               
        if (reg48) {
          gameState.d = gameState.INCREMENT_BOMB_3;
        } else {
          gameState.d = gameState.CHECK_POSITION_BOMB_4;
        }
        alufn = b110011; bsel = 1; c = 1;
        ra = 8h00; rb = 8h00; rc = 8h48; we = 0; sr = 0;
        
          
      gameState.INCREMENT_BOMB_3:
        alufn = b000000; bsel = 1; c = 1;
        ra = 8h49; rb = 0; rc = 8h49; we = 1; sr = 0;
        gameState.d = gameState.CHECK_POSITION_BOMB_4;
        
        
        
        /// ********* 4 ********** ///
          
      gameState.CHECK_POSITION_BOMB_4:               
        if (reg48) {
          gameState.d = gameState.INCREMENT_BOMB_4;
        } else {
          gameState.d = gameState.CHECK_POSITION_BOMB_5;
        }
        alufn = b110011; bsel = 1; c = 1;
        ra = 8h00; rb = 8h00; rc = 8h48; we = 0; sr = 0;
        
          
      gameState.INCREMENT_BOMB_4:
        alufn = b000000; bsel = 1; c = 1;
        ra = 8h49; rb = 0; rc = 8h49; we = 1; sr = 0;
        gameState.d = gameState.CHECK_POSITION_BOMB_5;
        
        
        
        
        /// ********* 5 ********** ///
          
      gameState.CHECK_POSITION_BOMB_5:               
        if (reg48) {
          gameState.d = gameState.INCREMENT_BOMB_5;
        } else {
          gameState.d = gameState.CHECK_POSITION_BOMB_6;
        }
        alufn = b110011; bsel = 1; c = 1;
        ra = 8h00; rb = 8h00; rc = 8h48; we = 0; sr = 0;
        
          
      gameState.INCREMENT_BOMB_5:
        alufn = b000000; bsel = 1; c = 1;
        ra = 8h49; rb = 0; rc = 8h49; we = 1; sr = 0;
        gameState.d = gameState.CHECK_POSITION_BOMB_6;
        
        
      
        /// ********* 6 ********** ///
          
      gameState.CHECK_POSITION_BOMB_6:               
        if (reg48) {
          gameState.d = gameState.INCREMENT_BOMB_6;
        } else {
          gameState.d = gameState.CHECK_POSITION_BOMB_7;
        }
        alufn = b110011; bsel = 1; c = 1;
        ra = 8h00; rb = 8h00; rc = 8h48; we = 0; sr = 0;
        
          
      gameState.INCREMENT_BOMB_6:
        alufn = b000000; bsel = 1; c = 1;
        ra = 8h49; rb = 0; rc = 8h49; we = 1; sr = 0;
        gameState.d = gameState.CHECK_POSITION_BOMB_7;
        
       
        /// ********* 7 ********** ///
          
      gameState.CHECK_POSITION_BOMB_7:               
        if (reg48) {
          gameState.d = gameState.INCREMENT_BOMB_7;
        } else {
          gameState.d = gameState.UPDATE_LIVES;
        }
        alufn = b110011; bsel = 1; c = 1;
        ra = 8h00; rb = 8h00; rc = 8h48; we = 0; sr = 0;
        
          
      gameState.INCREMENT_BOMB_7:
        alufn = b000000; bsel = 1; c = 1;
        ra = 8h49; rb = 0; rc = 8h49; we = 1; sr = 0;
        gameState.d = gameState.UPDATE_LIVES;
          
      
      /// ***** UPDATE LIVES ***** ///
       
      gameState.UPDATE_LIVES:
        
        gameState.d = gameState.UPDATE_BOARD;
      
      gameState.UPDATE_BOARD:
        gameState.d = gameState.PLAY;
        
        
    }      
     
    
  }
}
