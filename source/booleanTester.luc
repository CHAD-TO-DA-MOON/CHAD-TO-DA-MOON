module booleanTester (
    input clk, 
    input rst,
    input start,      // Press the "start" button to begin the unit tester. Start = 1 -> Tester wakes up; Start = 0 -> Tester is sleeping.
    input error,      // 1 -> tester in error mode; 0 -> tester in normal mode
    output indicator[2],    // Success = 1 -> Pass the tester. Success = 0 -> Fail the tester.
    output state_indicator[4],
    output counter_indicator[8]
 ) {
	dff counter[4](#INIT(0), .clk(clk), .rst(rst));
	fsm state(.clk(clk), .rst(rst)) = {SLEEP, TEST, PASS, FAIL};
	boolean booleanUnit;

	always{
        indicator = b10;   // 10: pending; 11: pass all the tests; 01: fail the tester
        booleanUnit.x = b0000000000000000;
        booleanUnit.y = b0000000000000000;
        booleanUnit.alufn = b000000;

        if (start == 0) {
          state.d = state.SLEEP;
          counter.d = 0;
        }
        
        case (state.q){
            state.SLEEP:
                if (start == 1) {state.d = state.TEST;}

            state.TEST:
                case (counter.q){
                    b0001:
                        // AND operation test
                        booleanUnit.alufn = b010000;  
                        booleanUnit.x = 16hF0F0;
                        booleanUnit.y = 16hFF0F;
                        if (error == 1) {if (~booleanUnit.out != 16hF000) {state.d = state.FAIL;}}
                        else{ if (booleanUnit.out != 16hF000) {state.d = state.FAIL;}} 
 

                    b0010: 
                        // OR operation test
                        booleanUnit.alufn = b010001;
                        booleanUnit.x = 16hF0F0;
                        booleanUnit.y = 16hFF00;
                        if (booleanUnit.out != 16hFFF0) {state.d = state.FAIL;} 
                    

                    b0011: 
                        // XOR operation test
                        booleanUnit.alufn = b010010;
                        booleanUnit.x = 16hF0F0;
                        booleanUnit.y = 16hFF00;
                        if (booleanUnit.out != 16h0FF0) {state.d = state.FAIL;} 
                    

                    b0100: 
                        // "A" operation test
                        booleanUnit.alufn = b010011;
                        booleanUnit.x = 16hF0F0;
                        booleanUnit.y = 16hFF00;
                        if (booleanUnit.out != 16hF0F0) {state.d = state.FAIL;} 
                    

                    b0101:
                        state.d = state.PASS;
                }

            state.PASS:
                indicator = b11;

            state.FAIL:
                indicator = b01;
        }
        if(state.q == state.TEST) {
          counter.d = counter.q + 1;
        }
        counter_indicator = counter.q;
        case (state.q) {
          state.SLEEP: state_indicator=b0001;
          state.TEST:  state_indicator=b0010;
          state.PASS:  state_indicator=b0100;
          state.FAIL:  state_indicator=b1000;
          default: state_indicator=b1111;
        }
	}
}