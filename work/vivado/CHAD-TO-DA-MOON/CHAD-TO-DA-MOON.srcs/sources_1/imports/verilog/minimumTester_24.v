/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module minimumTester_24 (
    input clk,
    input rst,
    input start,
    input error,
    output reg [1:0] indicator,
    output reg [3:0] state_indicator,
    output reg [7:0] counter_indicator
  );
  
  
  
  reg [4:0] M_counter_d, M_counter_q = 1'h0;
  
  
  localparam SLEEP_state = 2'd0;
  localparam TEST_state = 2'd1;
  localparam PASS_state = 2'd2;
  localparam FAIL_state = 2'd3;
  
  reg [1:0] M_state_d, M_state_q = SLEEP_state;
  
  wire [16-1:0] M_minimumUnit_out;
  reg [1-1:0] M_minimumUnit_v;
  reg [1-1:0] M_minimumUnit_n;
  reg [16-1:0] M_minimumUnit_x;
  reg [16-1:0] M_minimumUnit_y;
  reg [6-1:0] M_minimumUnit_alufn;
  minimum_18 minimumUnit (
    .v(M_minimumUnit_v),
    .n(M_minimumUnit_n),
    .x(M_minimumUnit_x),
    .y(M_minimumUnit_y),
    .alufn(M_minimumUnit_alufn),
    .out(M_minimumUnit_out)
  );
  
  wire [16-1:0] M_adderUnit_out;
  wire [1-1:0] M_adderUnit_z;
  wire [1-1:0] M_adderUnit_v;
  wire [1-1:0] M_adderUnit_n;
  reg [16-1:0] M_adderUnit_x;
  reg [16-1:0] M_adderUnit_y;
  reg [6-1:0] M_adderUnit_alufn;
  adder_13 adderUnit (
    .x(M_adderUnit_x),
    .y(M_adderUnit_y),
    .alufn(M_adderUnit_alufn),
    .out(M_adderUnit_out),
    .z(M_adderUnit_z),
    .v(M_adderUnit_v),
    .n(M_adderUnit_n)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_counter_d = M_counter_q;
    
    indicator = 2'h2;
    M_adderUnit_x = 16'h0000;
    M_adderUnit_y = 16'h0000;
    M_minimumUnit_x = 16'h0000;
    M_minimumUnit_y = 16'h0000;
    M_adderUnit_alufn = 6'h00;
    M_minimumUnit_alufn = 6'h00;
    M_minimumUnit_v = M_adderUnit_v;
    M_minimumUnit_n = M_adderUnit_n;
    if (start == 1'h0) begin
      M_state_d = SLEEP_state;
      M_counter_d = 1'h0;
    end
    
    case (M_state_q)
      SLEEP_state: begin
        if (start == 1'h1) begin
          M_state_d = TEST_state;
        end
      end
      TEST_state: begin
        
        case (M_counter_q)
          5'h01: begin
            M_minimumUnit_alufn = 6'h29;
            M_adderUnit_alufn = 6'h29;
            M_adderUnit_x = 16'h0000;
            M_adderUnit_y = 16'h0000;
            M_minimumUnit_x = 16'h0000;
            M_minimumUnit_y = 16'h0000;
            M_minimumUnit_v = M_adderUnit_v;
            M_minimumUnit_n = M_adderUnit_n;
            if (error == 1'h1) begin
              if (~M_minimumUnit_out != 16'h0000) begin
                M_state_d = FAIL_state;
              end
            end else begin
              if (M_minimumUnit_out != 16'h0000) begin
                M_state_d = FAIL_state;
              end
            end
          end
          5'h02: begin
            M_minimumUnit_alufn = 6'h29;
            M_adderUnit_alufn = 6'h29;
            M_adderUnit_x = 16'h0222;
            M_adderUnit_y = 16'h0222;
            M_minimumUnit_x = 16'h0222;
            M_minimumUnit_y = 16'h0222;
            M_minimumUnit_v = M_adderUnit_v;
            M_minimumUnit_n = M_adderUnit_n;
            if (M_minimumUnit_out != 16'h0222) begin
              M_state_d = FAIL_state;
            end
          end
          5'h03: begin
            M_minimumUnit_alufn = 6'h29;
            M_adderUnit_alufn = 6'h29;
            M_adderUnit_x = 16'hf111;
            M_adderUnit_y = 16'hf111;
            M_minimumUnit_x = 16'hf111;
            M_minimumUnit_y = 16'hf111;
            M_minimumUnit_v = M_adderUnit_v;
            M_minimumUnit_n = M_adderUnit_n;
            if (M_minimumUnit_out != 16'hf111) begin
              M_state_d = FAIL_state;
            end
          end
          5'h04: begin
            M_minimumUnit_alufn = 6'h29;
            M_adderUnit_alufn = 6'h29;
            M_adderUnit_x = 16'h0001;
            M_adderUnit_y = 16'h0003;
            M_minimumUnit_x = 16'h0001;
            M_minimumUnit_y = 16'h0003;
            M_minimumUnit_v = M_adderUnit_v;
            M_minimumUnit_n = M_adderUnit_n;
            if (M_minimumUnit_out != 16'h0001) begin
              M_state_d = FAIL_state;
            end
          end
          5'h05: begin
            M_minimumUnit_alufn = 6'h29;
            M_adderUnit_alufn = 6'h29;
            M_adderUnit_x = 16'hfff9;
            M_adderUnit_y = 16'h0001;
            M_minimumUnit_x = 16'hfff9;
            M_minimumUnit_y = 16'h0001;
            M_minimumUnit_v = M_adderUnit_v;
            M_minimumUnit_n = M_adderUnit_n;
            if (M_minimumUnit_out != 16'hfff9) begin
              M_state_d = FAIL_state;
            end
          end
          5'h06: begin
            M_minimumUnit_alufn = 6'h29;
            M_adderUnit_alufn = 6'h29;
            M_adderUnit_x = 16'hf001;
            M_adderUnit_y = 16'h7fff;
            M_minimumUnit_x = 16'hf001;
            M_minimumUnit_y = 16'h7fff;
            M_minimumUnit_v = M_adderUnit_v;
            M_minimumUnit_n = M_adderUnit_n;
            if (M_minimumUnit_out != 16'hf001) begin
              M_state_d = FAIL_state;
            end
          end
          5'h07: begin
            M_minimumUnit_alufn = 6'h29;
            M_adderUnit_alufn = 6'h29;
            M_adderUnit_x = 16'hfffd;
            M_adderUnit_y = 16'hfffe;
            M_minimumUnit_x = 16'hfffd;
            M_minimumUnit_y = 16'hfffe;
            M_minimumUnit_v = M_adderUnit_v;
            M_minimumUnit_n = M_adderUnit_n;
            if (M_minimumUnit_out != 16'hfffd) begin
              M_state_d = FAIL_state;
            end
          end
          5'h08: begin
            M_minimumUnit_alufn = 6'h29;
            M_adderUnit_alufn = 6'h29;
            M_adderUnit_x = 16'h0010;
            M_adderUnit_y = 16'h0008;
            M_minimumUnit_x = 16'h0010;
            M_minimumUnit_y = 16'h0008;
            M_minimumUnit_v = M_adderUnit_v;
            M_minimumUnit_n = M_adderUnit_n;
            if (M_minimumUnit_out != 16'h0008) begin
              M_state_d = FAIL_state;
            end
          end
          5'h09: begin
            M_minimumUnit_alufn = 6'h29;
            M_adderUnit_alufn = 6'h29;
            M_adderUnit_x = 16'h0003;
            M_adderUnit_y = 16'hffff;
            M_minimumUnit_x = 16'h0003;
            M_minimumUnit_y = 16'hffff;
            M_minimumUnit_v = M_adderUnit_v;
            M_minimumUnit_n = M_adderUnit_n;
            if (M_minimumUnit_out != 16'hffff) begin
              M_state_d = FAIL_state;
            end
          end
          5'h0a: begin
            M_minimumUnit_alufn = 6'h29;
            M_adderUnit_alufn = 6'h29;
            M_adderUnit_x = 16'h7fff;
            M_adderUnit_y = 16'hffff;
            M_minimumUnit_x = 16'h7fff;
            M_minimumUnit_y = 16'hffff;
            M_minimumUnit_v = M_adderUnit_v;
            M_minimumUnit_n = M_adderUnit_n;
            if (M_minimumUnit_out != 16'hffff) begin
              M_state_d = FAIL_state;
            end
          end
          5'h0b: begin
            M_minimumUnit_alufn = 6'h29;
            M_adderUnit_alufn = 6'h29;
            M_adderUnit_x = 16'hfcfe;
            M_adderUnit_y = 16'hfcfd;
            M_minimumUnit_x = 16'hfcfe;
            M_minimumUnit_y = 16'hfcfd;
            M_minimumUnit_v = M_adderUnit_v;
            M_minimumUnit_n = M_adderUnit_n;
            if (M_minimumUnit_out != 16'hfcfd) begin
              M_state_d = FAIL_state;
            end
          end
          5'h0c: begin
            M_minimumUnit_alufn = 6'h2b;
            M_adderUnit_alufn = 6'h2b;
            M_adderUnit_x = 16'h0000;
            M_adderUnit_y = 16'h0000;
            M_minimumUnit_x = 16'h0000;
            M_minimumUnit_y = 16'h0000;
            M_minimumUnit_v = M_adderUnit_v;
            M_minimumUnit_n = M_adderUnit_n;
            if (M_minimumUnit_out != 16'h0000) begin
              M_state_d = FAIL_state;
            end
          end
          5'h0d: begin
            M_minimumUnit_alufn = 6'h2b;
            M_adderUnit_alufn = 6'h2b;
            M_adderUnit_x = 16'h0200;
            M_adderUnit_y = 16'h0200;
            M_minimumUnit_x = 16'h0200;
            M_minimumUnit_y = 16'h0200;
            M_minimumUnit_v = M_adderUnit_v;
            M_minimumUnit_n = M_adderUnit_n;
            if (M_minimumUnit_out != 16'h0200) begin
              M_state_d = FAIL_state;
            end
          end
          5'h0e: begin
            M_minimumUnit_alufn = 6'h2b;
            M_adderUnit_alufn = 6'h2b;
            M_adderUnit_x = 16'hf111;
            M_adderUnit_y = 16'hf111;
            M_minimumUnit_x = 16'hf111;
            M_minimumUnit_y = 16'hf111;
            M_minimumUnit_v = M_adderUnit_v;
            M_minimumUnit_n = M_adderUnit_n;
            if (M_minimumUnit_out != 16'hf111) begin
              M_state_d = FAIL_state;
            end
          end
          5'h0f: begin
            M_minimumUnit_alufn = 6'h2b;
            M_adderUnit_alufn = 6'h2b;
            M_adderUnit_x = 16'h0120;
            M_adderUnit_y = 16'h0180;
            M_minimumUnit_x = 16'h0120;
            M_minimumUnit_y = 16'h0180;
            M_minimumUnit_v = M_adderUnit_v;
            M_minimumUnit_n = M_adderUnit_n;
            if (M_minimumUnit_out != 16'h0180) begin
              M_state_d = FAIL_state;
            end
          end
          5'h10: begin
            M_minimumUnit_alufn = 6'h2b;
            M_adderUnit_alufn = 6'h2b;
            M_adderUnit_x = 16'hfff9;
            M_adderUnit_y = 16'h0010;
            M_minimumUnit_x = 16'hfff9;
            M_minimumUnit_y = 16'h0010;
            M_minimumUnit_v = M_adderUnit_v;
            M_minimumUnit_n = M_adderUnit_n;
            if (M_minimumUnit_out != 16'h0010) begin
              M_state_d = FAIL_state;
            end
          end
          5'h11: begin
            M_minimumUnit_alufn = 6'h2b;
            M_adderUnit_alufn = 6'h2b;
            M_adderUnit_x = 16'hf000;
            M_adderUnit_y = 16'h7fff;
            M_minimumUnit_x = 16'hf000;
            M_minimumUnit_y = 16'h7fff;
            M_minimumUnit_v = M_adderUnit_v;
            M_minimumUnit_n = M_adderUnit_n;
            if (M_minimumUnit_out != 16'h7fff) begin
              M_state_d = FAIL_state;
            end
          end
          5'h12: begin
            M_minimumUnit_alufn = 6'h2b;
            M_adderUnit_alufn = 6'h2b;
            M_adderUnit_x = 16'hf001;
            M_adderUnit_y = 16'hfeee;
            M_minimumUnit_x = 16'hf001;
            M_minimumUnit_y = 16'hfeee;
            M_minimumUnit_v = M_adderUnit_v;
            M_minimumUnit_n = M_adderUnit_n;
            if (M_minimumUnit_out != 16'hfeee) begin
              M_state_d = FAIL_state;
            end
          end
          5'h13: begin
            M_minimumUnit_alufn = 6'h2b;
            M_adderUnit_alufn = 6'h2b;
            M_adderUnit_x = 16'h0888;
            M_adderUnit_y = 16'h0666;
            M_minimumUnit_x = 16'h0888;
            M_minimumUnit_y = 16'h0666;
            M_minimumUnit_v = M_adderUnit_v;
            M_minimumUnit_n = M_adderUnit_n;
            if (M_minimumUnit_out != 16'h0888) begin
              M_state_d = FAIL_state;
            end
          end
          5'h14: begin
            M_minimumUnit_alufn = 6'h2b;
            M_adderUnit_alufn = 6'h2b;
            M_adderUnit_x = 16'h0011;
            M_adderUnit_y = 16'hffff;
            M_minimumUnit_x = 16'h0011;
            M_minimumUnit_y = 16'hffff;
            M_minimumUnit_v = M_adderUnit_v;
            M_minimumUnit_n = M_adderUnit_n;
            if (M_minimumUnit_out != 16'h0011) begin
              M_state_d = FAIL_state;
            end
          end
          5'h15: begin
            M_minimumUnit_alufn = 6'h2b;
            M_adderUnit_alufn = 6'h2b;
            M_adderUnit_x = 16'h7fff;
            M_adderUnit_y = 16'hff99;
            M_minimumUnit_x = 16'h7fff;
            M_minimumUnit_y = 16'hff99;
            M_minimumUnit_v = M_adderUnit_v;
            M_minimumUnit_n = M_adderUnit_n;
            if (M_minimumUnit_out != 16'h7fff) begin
              M_state_d = FAIL_state;
            end
          end
          5'h16: begin
            M_minimumUnit_alufn = 6'h2b;
            M_adderUnit_alufn = 6'h2b;
            M_adderUnit_x = 16'hfccc;
            M_adderUnit_y = 16'hfbbb;
            M_minimumUnit_x = 16'hfccc;
            M_minimumUnit_y = 16'hfbbb;
            M_minimumUnit_v = M_adderUnit_v;
            M_minimumUnit_n = M_adderUnit_n;
            if (M_minimumUnit_out != 16'hfccc) begin
              M_state_d = FAIL_state;
            end
          end
          5'h17: begin
            M_state_d = PASS_state;
          end
        endcase
      end
      PASS_state: begin
        indicator = 2'h3;
      end
      FAIL_state: begin
        indicator = 2'h1;
      end
    endcase
    if (M_state_q == TEST_state) begin
      M_counter_d = M_counter_q + 1'h1;
    end
    counter_indicator = M_counter_q;
    
    case (M_state_q)
      SLEEP_state: begin
        state_indicator = 4'h1;
      end
      TEST_state: begin
        state_indicator = 4'h2;
      end
      PASS_state: begin
        state_indicator = 4'h4;
      end
      FAIL_state: begin
        state_indicator = 4'h8;
      end
      default: begin
        state_indicator = 4'hf;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
    end
  end
  
endmodule
