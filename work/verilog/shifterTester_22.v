/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module shifterTester_22 (
    input clk,
    input rst,
    input start,
    input error,
    output reg [3:0] state_indicator,
    output reg [7:0] counter_indicator,
    output reg [1:0] indicator
  );
  
  
  
  reg [3:0] M_counter_d, M_counter_q = 1'h0;
  
  
  localparam SLEEP_state = 2'd0;
  localparam TEST_state = 2'd1;
  localparam PASS_state = 2'd2;
  localparam FAIL_state = 2'd3;
  
  reg [1:0] M_state_d, M_state_q = SLEEP_state;
  
  wire [16-1:0] M_shifterUnit_out;
  reg [16-1:0] M_shifterUnit_x;
  reg [16-1:0] M_shifterUnit_y;
  reg [6-1:0] M_shifterUnit_alufn;
  shifter_15 shifterUnit (
    .x(M_shifterUnit_x),
    .y(M_shifterUnit_y),
    .alufn(M_shifterUnit_alufn),
    .out(M_shifterUnit_out)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_counter_d = M_counter_q;
    
    indicator = 2'h2;
    M_shifterUnit_x = 16'h0000;
    M_shifterUnit_y = 16'h0000;
    M_shifterUnit_alufn = 6'h00;
    if (start == 1'h0) begin
      M_state_d = SLEEP_state;
      M_counter_d = 1'h0;
    end
    
    case (M_state_q)
      SLEEP_state: begin
        if (start == 1'h1) begin
          M_state_d = TEST_state;
        end
      end
      TEST_state: begin
        
        case (M_counter_q)
          4'h1: begin
            M_shifterUnit_alufn = 6'h18;
            M_shifterUnit_x = 16'hffff;
            M_shifterUnit_y = 16'h0005;
            if (error == 1'h1) begin
              if (~M_shifterUnit_out != 16'hffe0) begin
                M_state_d = FAIL_state;
              end
            end else begin
              if (M_shifterUnit_out != 16'hffe0) begin
                M_state_d = FAIL_state;
              end
            end
          end
          4'h2: begin
            M_shifterUnit_alufn = 6'h18;
            M_shifterUnit_x = 16'hffff;
            M_shifterUnit_y = 16'h0000;
            if (M_shifterUnit_out != 16'hffff) begin
              M_state_d = FAIL_state;
            end
          end
          4'h3: begin
            M_shifterUnit_alufn = 6'h18;
            M_shifterUnit_x = 16'hffff;
            M_shifterUnit_y = 16'h000f;
            if (M_shifterUnit_out != 16'h8000) begin
              M_state_d = FAIL_state;
            end
          end
          4'h4: begin
            M_shifterUnit_alufn = 6'h19;
            M_shifterUnit_x = 16'hffff;
            M_shifterUnit_y = 16'h0000;
            if (M_shifterUnit_out != 16'hffff) begin
              M_state_d = FAIL_state;
            end
          end
          4'h5: begin
            M_shifterUnit_alufn = 6'h19;
            M_shifterUnit_x = 16'hffff;
            M_shifterUnit_y = 16'h000f;
            if (M_shifterUnit_out != 16'h0001) begin
              M_state_d = FAIL_state;
            end
          end
          4'h6: begin
            M_shifterUnit_alufn = 6'h19;
            M_shifterUnit_x = 16'hffff;
            M_shifterUnit_y = 16'h0005;
            if (M_shifterUnit_out != 16'h07ff) begin
              M_state_d = FAIL_state;
            end
          end
          4'h7: begin
            M_shifterUnit_alufn = 6'h1a;
            M_shifterUnit_x = 16'hffff;
            M_shifterUnit_y = 16'h0000;
            if (M_shifterUnit_out != 16'hffff) begin
              M_state_d = FAIL_state;
            end
          end
          4'h8: begin
            M_shifterUnit_alufn = 6'h1a;
            M_shifterUnit_x = 16'h0fff;
            M_shifterUnit_y = 16'h0000;
            if (M_shifterUnit_out != 16'h0fff) begin
              M_state_d = FAIL_state;
            end
          end
          4'h9: begin
            M_shifterUnit_alufn = 6'h1a;
            M_shifterUnit_x = 16'h9fff;
            M_shifterUnit_y = 16'h000f;
            if (M_shifterUnit_out != 16'hffff) begin
              M_state_d = FAIL_state;
            end
          end
          4'ha: begin
            M_shifterUnit_alufn = 6'h1a;
            M_shifterUnit_x = 16'h9fff;
            M_shifterUnit_y = 16'h0005;
            if (M_shifterUnit_out != 16'hfcff) begin
              M_state_d = FAIL_state;
            end
          end
          4'hb: begin
            M_shifterUnit_alufn = 6'h1a;
            M_shifterUnit_x = 16'h0fff;
            M_shifterUnit_y = 16'h0008;
            if (M_shifterUnit_out != 16'h000f) begin
              M_state_d = FAIL_state;
            end
          end
          4'hc: begin
            M_shifterUnit_alufn = 6'h1a;
            M_shifterUnit_x = 16'haaaa;
            M_shifterUnit_y = 16'h0003;
            if (M_shifterUnit_out != 16'hf555) begin
              M_state_d = FAIL_state;
            end
          end
          4'hd: begin
            M_state_d = PASS_state;
          end
        endcase
      end
      PASS_state: begin
        indicator = 2'h3;
      end
      FAIL_state: begin
        indicator = 2'h1;
      end
    endcase
    if (M_state_q == TEST_state) begin
      M_counter_d = M_counter_q + 1'h1;
    end
    counter_indicator = M_counter_q;
    
    case (M_state_q)
      SLEEP_state: begin
        state_indicator = 4'h1;
      end
      TEST_state: begin
        state_indicator = 4'h2;
      end
      PASS_state: begin
        state_indicator = 4'h4;
      end
      FAIL_state: begin
        state_indicator = 4'h8;
      end
      default: begin
        state_indicator = 4'hf;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
    end
  end
  
endmodule
