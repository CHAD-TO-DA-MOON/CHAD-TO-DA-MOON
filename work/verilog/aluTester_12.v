/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module aluTester_12 (
    input clk,
    input rst,
    input proceed,
    output reg [2:0] out,
    output reg [1:0] indicator,
    output reg [7:0] counter_indicator,
    output reg [3:0] state_indicator
  );
  
  
  
  localparam IDLE_testAluFsm = 3'd0;
  localparam ADDER_testAluFsm = 3'd1;
  localparam BOOL_testAluFsm = 3'd2;
  localparam SHIFTER_testAluFsm = 3'd3;
  localparam COMPARE_testAluFsm = 3'd4;
  localparam MIN_testAluFsm = 3'd5;
  localparam MULT_testAluFsm = 3'd6;
  
  reg [2:0] M_testAluFsm_d, M_testAluFsm_q = IDLE_testAluFsm;
  
  reg M_run_test_d, M_run_test_q = 1'h0;
  wire [2-1:0] M_adderFSM_indicator;
  wire [4-1:0] M_adderFSM_state_indicator;
  wire [8-1:0] M_adderFSM_counter_indicator;
  adderTester_19 adderFSM (
    .clk(clk),
    .rst(rst),
    .start(M_run_test_q),
    .error(1'h1),
    .indicator(M_adderFSM_indicator),
    .state_indicator(M_adderFSM_state_indicator),
    .counter_indicator(M_adderFSM_counter_indicator)
  );
  wire [2-1:0] M_booleanFSM_indicator;
  wire [4-1:0] M_booleanFSM_state_indicator;
  wire [8-1:0] M_booleanFSM_counter_indicator;
  booleanTester_20 booleanFSM (
    .clk(clk),
    .rst(rst),
    .start(M_run_test_q),
    .error(1'h1),
    .indicator(M_booleanFSM_indicator),
    .state_indicator(M_booleanFSM_state_indicator),
    .counter_indicator(M_booleanFSM_counter_indicator)
  );
  wire [4-1:0] M_multiplierFSM_state_indicator;
  wire [8-1:0] M_multiplierFSM_counter_indicator;
  wire [2-1:0] M_multiplierFSM_indicator;
  multiplierTester_21 multiplierFSM (
    .clk(clk),
    .rst(rst),
    .start(M_run_test_q),
    .error(1'h1),
    .state_indicator(M_multiplierFSM_state_indicator),
    .counter_indicator(M_multiplierFSM_counter_indicator),
    .indicator(M_multiplierFSM_indicator)
  );
  wire [4-1:0] M_shifterFSM_state_indicator;
  wire [8-1:0] M_shifterFSM_counter_indicator;
  wire [2-1:0] M_shifterFSM_indicator;
  shifterTester_22 shifterFSM (
    .clk(clk),
    .rst(rst),
    .start(M_run_test_q),
    .error(1'h1),
    .state_indicator(M_shifterFSM_state_indicator),
    .counter_indicator(M_shifterFSM_counter_indicator),
    .indicator(M_shifterFSM_indicator)
  );
  wire [4-1:0] M_compareFSM_state_indicator;
  wire [8-1:0] M_compareFSM_counter_indicator;
  wire [2-1:0] M_compareFSM_indicator;
  compareTester_23 compareFSM (
    .clk(clk),
    .rst(rst),
    .start(M_run_test_q),
    .error(1'h1),
    .state_indicator(M_compareFSM_state_indicator),
    .counter_indicator(M_compareFSM_counter_indicator),
    .indicator(M_compareFSM_indicator)
  );
  wire [2-1:0] M_minFSM_indicator;
  wire [4-1:0] M_minFSM_state_indicator;
  wire [8-1:0] M_minFSM_counter_indicator;
  minimumTester_24 minFSM (
    .clk(clk),
    .rst(rst),
    .start(M_run_test_q),
    .error(1'h1),
    .indicator(M_minFSM_indicator),
    .state_indicator(M_minFSM_state_indicator),
    .counter_indicator(M_minFSM_counter_indicator)
  );
  
  always @* begin
    M_testAluFsm_d = M_testAluFsm_q;
    M_run_test_d = M_run_test_q;
    
    if (rst & 1'h1) begin
      M_testAluFsm_d = IDLE_testAluFsm;
    end else begin
      M_testAluFsm_d = M_testAluFsm_q;
    end
    out = 3'h0;
    indicator = 2'h2;
    counter_indicator = 1'h0;
    state_indicator = 1'h0;
    
    case (M_testAluFsm_q)
      IDLE_testAluFsm: begin
        if (proceed == 1'h1) begin
          M_testAluFsm_d = ADDER_testAluFsm;
          M_run_test_d = 1'h1;
        end else begin
          M_run_test_d = 1'h0;
        end
      end
      ADDER_testAluFsm: begin
        out = 3'h0;
        indicator = M_adderFSM_indicator;
        state_indicator = M_adderFSM_state_indicator;
        counter_indicator = M_adderFSM_counter_indicator;
        if (proceed == 1'h1) begin
          M_testAluFsm_d = MULT_testAluFsm;
        end
      end
      MULT_testAluFsm: begin
        out = 3'h1;
        indicator = M_multiplierFSM_indicator;
        state_indicator = M_multiplierFSM_state_indicator;
        counter_indicator = M_multiplierFSM_counter_indicator;
        if (proceed == 1'h1) begin
          M_testAluFsm_d = BOOL_testAluFsm;
        end
      end
      BOOL_testAluFsm: begin
        out = 3'h2;
        indicator = M_booleanFSM_indicator;
        state_indicator = M_booleanFSM_state_indicator;
        counter_indicator = M_booleanFSM_counter_indicator;
        if (proceed == 1'h1) begin
          M_testAluFsm_d = SHIFTER_testAluFsm;
        end
      end
      SHIFTER_testAluFsm: begin
        out = 3'h3;
        indicator = M_shifterFSM_indicator;
        state_indicator = M_shifterFSM_state_indicator;
        counter_indicator = M_shifterFSM_counter_indicator;
        if (proceed == 1'h1) begin
          M_testAluFsm_d = COMPARE_testAluFsm;
        end
      end
      COMPARE_testAluFsm: begin
        out = 3'h4;
        indicator = M_compareFSM_indicator;
        state_indicator = M_compareFSM_state_indicator;
        counter_indicator = M_compareFSM_counter_indicator;
        if (proceed == 1'h1) begin
          M_testAluFsm_d = MIN_testAluFsm;
        end
      end
      MIN_testAluFsm: begin
        out = 3'h5;
        indicator = M_minFSM_indicator;
        state_indicator = M_minFSM_state_indicator;
        counter_indicator = M_minFSM_counter_indicator;
        if (proceed == 1'h1) begin
          M_testAluFsm_d = IDLE_testAluFsm;
        end
      end
      default: begin
        out = 3'h0;
        M_testAluFsm_d = ADDER_testAluFsm;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_run_test_q <= 1'h0;
    end else begin
      M_run_test_q <= M_run_test_d;
    end
  end
  
  
  always @(posedge clk) begin
    M_testAluFsm_q <= M_testAluFsm_d;
  end
  
endmodule
