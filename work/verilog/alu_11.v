/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_11 (
    input [15:0] x,
    input [15:0] y,
    input [5:0] alufn,
    output reg [15:0] out,
    output reg z,
    output reg v,
    output reg n
  );
  
  
  
  wire [16-1:0] M_adderUnit_out;
  wire [1-1:0] M_adderUnit_z;
  wire [1-1:0] M_adderUnit_v;
  wire [1-1:0] M_adderUnit_n;
  reg [16-1:0] M_adderUnit_x;
  reg [16-1:0] M_adderUnit_y;
  reg [6-1:0] M_adderUnit_alufn;
  adder_13 adderUnit (
    .x(M_adderUnit_x),
    .y(M_adderUnit_y),
    .alufn(M_adderUnit_alufn),
    .out(M_adderUnit_out),
    .z(M_adderUnit_z),
    .v(M_adderUnit_v),
    .n(M_adderUnit_n)
  );
  
  wire [16-1:0] M_booleanUnit_out;
  reg [16-1:0] M_booleanUnit_x;
  reg [16-1:0] M_booleanUnit_y;
  reg [6-1:0] M_booleanUnit_alufn;
  boolean_14 booleanUnit (
    .x(M_booleanUnit_x),
    .y(M_booleanUnit_y),
    .alufn(M_booleanUnit_alufn),
    .out(M_booleanUnit_out)
  );
  
  wire [16-1:0] M_shifterUnit_out;
  reg [16-1:0] M_shifterUnit_x;
  reg [16-1:0] M_shifterUnit_y;
  reg [6-1:0] M_shifterUnit_alufn;
  shifter_15 shifterUnit (
    .x(M_shifterUnit_x),
    .y(M_shifterUnit_y),
    .alufn(M_shifterUnit_alufn),
    .out(M_shifterUnit_out)
  );
  
  wire [16-1:0] M_compareUnit_out;
  reg [1-1:0] M_compareUnit_z;
  reg [1-1:0] M_compareUnit_v;
  reg [1-1:0] M_compareUnit_n;
  reg [16-1:0] M_compareUnit_x;
  reg [16-1:0] M_compareUnit_y;
  reg [6-1:0] M_compareUnit_alufn;
  compare_16 compareUnit (
    .z(M_compareUnit_z),
    .v(M_compareUnit_v),
    .n(M_compareUnit_n),
    .x(M_compareUnit_x),
    .y(M_compareUnit_y),
    .alufn(M_compareUnit_alufn),
    .out(M_compareUnit_out)
  );
  
  wire [16-1:0] M_multiplierUnit_out;
  reg [16-1:0] M_multiplierUnit_x;
  reg [16-1:0] M_multiplierUnit_y;
  multiplier_17 multiplierUnit (
    .x(M_multiplierUnit_x),
    .y(M_multiplierUnit_y),
    .out(M_multiplierUnit_out)
  );
  
  wire [16-1:0] M_minimumUnit_out;
  reg [1-1:0] M_minimumUnit_v;
  reg [1-1:0] M_minimumUnit_n;
  reg [16-1:0] M_minimumUnit_x;
  reg [16-1:0] M_minimumUnit_y;
  reg [6-1:0] M_minimumUnit_alufn;
  minimum_18 minimumUnit (
    .v(M_minimumUnit_v),
    .n(M_minimumUnit_n),
    .x(M_minimumUnit_x),
    .y(M_minimumUnit_y),
    .alufn(M_minimumUnit_alufn),
    .out(M_minimumUnit_out)
  );
  
  reg z_copy;
  
  reg v_copy;
  
  reg n_copy;
  
  always @* begin
    M_adderUnit_alufn = alufn;
    M_adderUnit_x = x;
    M_adderUnit_y = y;
    z = M_adderUnit_z;
    v = M_adderUnit_v;
    n = M_adderUnit_n;
    z_copy = M_adderUnit_z;
    v_copy = M_adderUnit_v;
    n_copy = M_adderUnit_n;
    M_compareUnit_alufn = alufn;
    M_compareUnit_x = x;
    M_compareUnit_y = y;
    M_compareUnit_z = z_copy;
    M_compareUnit_v = v_copy;
    M_compareUnit_n = n_copy;
    M_booleanUnit_alufn = alufn;
    M_booleanUnit_x = x;
    M_booleanUnit_y = y;
    M_shifterUnit_alufn = alufn;
    M_shifterUnit_x = x;
    M_shifterUnit_y = y;
    M_multiplierUnit_x = x;
    M_multiplierUnit_y = y;
    M_minimumUnit_alufn = alufn;
    M_minimumUnit_v = v_copy;
    M_minimumUnit_n = n_copy;
    M_minimumUnit_x = x;
    M_minimumUnit_y = y;
    
    case (alufn[3+2-:3])
      3'h0: begin
        out = M_adderUnit_out;
      end
      3'h1: begin
        out = M_multiplierUnit_out;
      end
      3'h2: begin
        out = M_booleanUnit_out;
      end
      3'h3: begin
        out = M_shifterUnit_out;
      end
      3'h4: begin
        out = M_compareUnit_out;
      end
      3'h5: begin
        out = M_minimumUnit_out;
      end
      default: begin
        out = 16'h0000;
      end
    endcase
  end
endmodule
